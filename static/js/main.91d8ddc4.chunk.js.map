{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","robots.js","components/SearchBox.js","components/scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","cardlist","robots","cardComponent","map","user","i","key","username","SearchBox","searchchange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onsearch","event","setState","searchfield","target","value","state","filteredRobots","this","filter","toLowerCase","includes","CardList","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCGSC,EAlBF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAEzB,OACI,yBAAKC,UAAY,wDACb,yBAAKC,IAAM,SAASC,IAAG,+BAA4BH,EAA5B,cACvB,6BACI,4BACKF,GAEL,2BACKC,MCENK,EAZE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GAEnC,OAAO,kBAAC,EAAD,CAAMC,IAAOD,EAAGT,GAAMK,EAAOI,GAAGT,GAAIF,KAAQO,EAAOI,GAAGX,KAAMC,MAASM,EAAOI,GAAGV,WAE1F,OACI,6BACKO,ICqDID,EA/DK,CAClB,CACEL,GAAI,EACJF,KAAM,gBACNa,SAAU,OACVZ,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,eACNa,SAAU,YACVZ,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,mBACNa,SAAU,WACVZ,MAAO,sBAET,CACEC,GAAI,EACJF,KAAM,mBACNa,SAAU,WACVZ,MAAO,6BAET,CACEC,GAAI,EACJF,KAAM,mBACNa,SAAU,SACVZ,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,uBACNa,SAAU,mBACVZ,MAAO,2BAET,CACEC,GAAI,EACJF,KAAM,kBACNa,SAAU,eACVZ,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,2BACNa,SAAU,gBACVZ,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,kBACNa,SAAU,WACVZ,MAAO,2BAET,CACEC,GAAI,GACJF,KAAM,qBACNa,SAAU,iBACVZ,MAAO,2BC9CEa,EAXG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKZ,UAAY,OACb,2BAAOA,UAAY,mCACnBa,KAAO,SACPC,YAAc,gBACdC,SAAYH,MCETI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAS,CAACC,SAAU,SAAUC,OAAS,kBAAkBC,OAAS,UAClEJ,EAAMK,WCsCJC,G,wDAnCX,aAAc,IAAD,8BACT,gBAOJC,SAAW,SAACC,GAER,EAAKC,SAAS,CAACC,YAAcF,EAAMG,OAAOC,SAR1C,EAAKC,MAAQ,CACT1B,OAASA,EACTuB,YAAc,IAJT,E,qDAcJ,IAAD,OACEI,EAAiBC,KAAKF,MAAM1B,OAAO6B,QAAO,SAAA7B,GAExC,OAAOA,EAAOP,KAAKqC,cAAcC,SAAS,EAAKL,MAAMH,YAAYO,kBAEzE,OACI,yBAAKlC,UAAY,MACb,wBAAIA,UAAY,MAAhB,iBACA,kBAAC,EAAD,CAAWY,aAAgBoB,KAAKR,WAChC,kBAAC,EAAD,KACA,kBAACY,EAAD,CAAUhC,OAAW2B,U,GAzBnBM,cCAlBC,IAASC,OAEP,kBAAC,EAAD,MAGAC,SAASC,eAAe,SPuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.91d8ddc4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\n\r\nconst Card = ({ name, email ,id }) =>{\r\n    \r\n    return(\r\n        <div className = \"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 \">\r\n            <img alt = 'robots' src = {`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>\r\n                    {name}\r\n                </h2>\r\n                <p>\r\n                    {email}\r\n                </p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst cardlist = ({ robots }) => {\r\n    const cardComponent = robots.map((user,i) =>\r\n    {\r\n        return <Card key = {i} id = {robots[i].id} name = {robots[i].name} email = {robots[i].email}/>;\r\n    })\r\n    return (\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default cardlist;","export const robots = [\r\n    {\r\n      id: 1,\r\n      name: 'Leanne Graham',\r\n      username: 'Bret',\r\n      email: 'Sincere@april.biz'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Ervin Howell',\r\n      username: 'Antonette',\r\n      email: 'Shanna@melissa.tv'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Clementine Bauch',\r\n      username: 'Samantha',\r\n      email: 'Nathan@yesenia.net'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Patricia Lebsack',\r\n      username: 'Karianne',\r\n      email: 'Julianne.OConner@kory.org'\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'Chelsey Dietrich',\r\n      username: 'Kamren',\r\n      email: 'Lucio_Hettinger@annie.ca'\r\n    },\r\n    {\r\n      id: 6,\r\n      name: 'Mrs. Dennis Schulist',\r\n      username: 'Leopoldo_Corkery',\r\n      email: 'Karley_Dach@jasper.info'\r\n    },\r\n    {\r\n      id: 7,\r\n      name: 'Kurtis Weissnat',\r\n      username: 'Elwyn.Skiles',\r\n      email: 'Telly.Hoeger@billy.biz'\r\n    },\r\n    {\r\n      id: 8,\r\n      name: 'Nicholas Runolfsdottir V',\r\n      username: 'Maxime_Nienow',\r\n      email: 'Sherwood@rosamond.me'\r\n    },\r\n    {\r\n      id: 9,\r\n      name: 'Glenna Reichert',\r\n      username: 'Delphine',\r\n      email: 'Chaim_McDermott@dana.io'\r\n    },\r\n    {\r\n      id: 10,\r\n      name: 'Clementina DuBuque',\r\n      username: 'Moriah.Stanton',\r\n      email: 'Rey.Padberg@karina.biz'\r\n    }\r\n  ];\r\n  \r\n  export default robots;","import React from 'react';\r\n\r\nconst SearchBox = ({searchchange}) => {\r\n    return(\r\n        <div className = 'pa2'>\r\n            <input className = 'pa3 ba b--green bg-lightest-blue'\r\n            type = 'search' \r\n            placeholder = 'search robots' \r\n            onChange = {searchchange}/>\r\n        </div>\r\n        \r\n    )\r\n}\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style = {{overflow :'scroll' ,border : '1px solid black',height : '600px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport robots from '../robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/scroll';\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots : robots,\r\n            searchfield : ''\r\n        }\r\n    }\r\n\r\n    onsearch = (event) =>\r\n    {\r\n        this.setState({searchfield : event.target.value })\r\n        \r\n            \r\n    }\r\n    render(){\r\n        const filteredRobots = this.state.robots.filter(robots =>\r\n            {\r\n                return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n            })\r\n        return (\r\n            <div className = 'tc'>\r\n                <h1 className = 'f1'>Robo Friends </h1>\r\n                <SearchBox searchchange = {this.onsearch}/>\r\n                <Scroll>\r\n                <CardList robots = { filteredRobots }/>\r\n                </Scroll>\r\n                \r\n    \r\n            </div>\r\n            \r\n        ); \r\n    }\r\n    \r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App'\n\nReactDOM.render(\n \n  <App/>,\n    \n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}